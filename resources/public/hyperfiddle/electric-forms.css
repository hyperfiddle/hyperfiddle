/*
  Modern CSS refresher:
  - :is(selector1, selectorN...) is a logical OR.
    `input:is(.class1, .class2)` matches INPUT if it has .class1, .class2, or both.
    - examples:
      - boolean algebra: :not(:is(.a), :is(.b)) <-> :is(:not(.a), :not(.b))
      - cartesian product: form input:is([type=radio],[type=checkbox]):is(.classA, .class1) – Matches radio.classA, radio.classB, checkbox.classA, checkbox.classB
  - :has(selector1, selectorN) is a lookahead.
    `form:has(input[type=submit])` matches FORM if it contains a submit button.
    - examples:
      - `label:has(+ input)` – matches LABEL if it is directly followed by an input
      - `label:has(+ input) + input` – matches INPUT if it comes just after a label
      - `label:has(> input)` – matches all LABEL if they contain an input as a direct child
      - `*:has(*)` – matches all elements containing at least an element. O(n²). That's bad mkay.
  - :where(selector1, selectorN...) is like `:is`, but for default (base) styles.
    Do you know about CSS selector specificity? If no just use :is() instead.
    :where always have a 0-specificity. Use it to provide default styles that are easy to override.
 */

/* Layout */

form dl { margin: 0; display: grid; grid-template-columns: max-content auto; gap: 0.5rem 0.75rem; }
form dl dt {
    grid-column: 1;
    display:flex; align-items: baseline; justify-content: end; height:100%;
    font-weight: 500;
    font-size: 0.9rem;
}
form dl dd {
    grid-column: 2;
    display: flex; gap: 0.5rem; flex-wrap: nowrap; align-items: center;
}

/* inputs */

form input{
    border-radius: 4px;
}

form input:disabled{
    border-color: #cdcdcd; /* native */
    color: rgb(109, 109, 109); /* native */
}

form [type="text"]
, form input:where(:not([type]))
, form [type="email"]
, form [type="url"]
, form [type="password"]
, form [type="number"]
, form [type="date"]
, form [type="datetime-local"]
, form [type="month"]
, form [type="search"]
, form [type="tel"]
, form [type="time"]
, form [type="week"]
, form [multiple]
, form textarea
, form select{
    border-radius: 3px;
    padding: 0.125rem 0.5rem;
}

form dl[role=radiogroup]{
    --radiogroup-items-count: 0;
    grid-template-rows: repeat(var(--radiogroup-items-count), auto);
}

form dl[role=radiogroup] dt label::after{
    display: none;
}

form dl[role=radiogroup] dd{
    display: inline;
}

form dl[role=radiogroup] dd input{
    vertical-align: baseline;
    margin-right: 0.5rem;
}

/* Validation */
/* [aria-invalid=true] means tx rejected, :invalid or :user-invalid means user input failed validation */

form [data-role=errormessage]{
    /*
      Error messages are hidden by default, waiting for user interaction.
      Nothing prevents the error message value to be computed early.
   */
    color: red;
}

form [data-role=errormessage]:empty{
    visibility:hidden;
}

/* Field-level error messages */

form dt label::after{
    /* little red star next to a label of a required input */
    content: "*";
    visibility: hidden;
    color: crimson;
    padding-left: 0.1rem;
    font-weight: 300;
}

form dt:has(+ dd :required) label::after /* label is left of (before) a required input */
{
    visibility: visible;
}

form dd:has(:invalid){
    --error-message: ""; /* set default value */
}

form dd:has(:invalid)::after,
form [role=radiogroup][data-errormessage]::after{
    content: var(--error-message);
    color: red;
    font-size: 0.85rem;
}

/* Nested case: data-errormessage has precedence over native :invalid state */
form dd:has([data-errormessage])::after,
form dd:has([data-errormessage]) dd::after
{
    display: none;
}

form [role=radiogroup][data-errormessage]::after{
    border-left: 1px red solid;
    height: 100%;
    display: flex; align-items:center;
    padding-left: .5rem;

    grid-column: 3;
    grid-row: 1 / -1;
}

form dd:has(:invalid:required){
    /* Note browsers never flag :disabled inputs as :invalid.
       There are no safe way to detect an invalid disabled input from CSS.
     */
    --error-message: "Required";
}

form dd :is([role=radiogroup], input)[data-errormessage]{
    --error-message: attr(data-errormessage);
}

form :is([role=radiogroup]) dd:has(:invalid)::after{
    --error-message: ""; /* Silence radio-level error message. Message already rendered at the radiogroup level. */
}

/* Form-level error message */
form:has([type=submit]:is([aria-invalid=true], [aria-busy=true])) /* form is invalid or committing */
        > [data-role=errormessage]
{
    visibility: visible;
}

/* Transaction */

form :is(input,button):is([type=submit], [type=reset]){
    border: 1px gray solid;
    padding: 1px 4px;
    border-radius: 4px;
    font-size: 0.85rem;
}

form :where([type=submit]:disabled)
, form:invalid :where([type=submit])
{
    background-color: #F4F4F6; /* native button disabled bgcolor */
    color: rgb(109, 109, 109);
    pointer-events: none;
}

form :where(:is([type=submit], [type=reset]):not(:disabled):hover){
    cursor: pointer;
    background-color: whitesmoke;
}

form [aria-busy=true]
, button[aria-busy=true]
{background-color: yellow;}

/* tx-status on commit button */
form :is(input, button)[type=submit][aria-invalid=true]
, button[aria-invalid=true]
{
    background-color: pink;
}

form :is(input, button)[type=submit][data-tx-status=accepted]:not([aria-disabled])
, button[data-tx-status=accepted]:not([aria-disabled])
/* :not([aria-disabled]) ensures success color reverts as soon as users edit the form again */
{
    background-color: rgb(34 197 94); /* tw text-green-500 */
}

form input:is([type=checkbox],[type=radio])[aria-busy=true]{
    /* Can't color or background-color native checkboxes border and outline are
       tricky to get right without messing up keyboard nav. Not supported on safari.
   */
    box-shadow: 0 0 0.2rem 0.2rem yellow; /* simulate a border */
    outline: none;
}

_::-webkit-full-page-media, _:future, :root /* Safari detector – selector on next line only applies to Safari https://stackoverflow.com/a/25975282 */
form input:is([type=checkbox],[type=radio])[aria-busy=true] {
    outline: 3px yellow solid;
}

/* Tablepicker row */
[role=radiogroup][aria-busy=true] > [aria-checked=true] {background-color: yellow; color: inherit;}
[role=radiogroup][aria-busy=true] > [aria-checked=true] > * {background-color: yellow; color: inherit;}
[role=radio][aria-checked][aria-busy=true]     {background-color: yellow !important; color: inherit;} /* is !important necessary here? why? */
[role=radio][aria-checked][aria-busy=true] > * {background-color: yellow !important; color: inherit;} /* is !important necessary here? why? */